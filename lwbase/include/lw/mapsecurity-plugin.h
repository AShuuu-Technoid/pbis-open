/*
 * Copyright Â© BeyondTrust Software 2004 - 2019
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * BEYONDTRUST MAKES THIS SOFTWARE AVAILABLE UNDER OTHER LICENSING TERMS AS
 * WELL. IF YOU HAVE ENTERED INTO A SEPARATE LICENSE AGREEMENT WITH
 * BEYONDTRUST, THEN YOU MAY ELECT TO USE THE SOFTWARE UNDER THE TERMS OF THAT
 * SOFTWARE LICENSE AGREEMENT INSTEAD OF THE TERMS OF THE APACHE LICENSE,
 * NOTWITHSTANDING THE ABOVE NOTICE.  IF YOU HAVE QUESTIONS, OR WISH TO REQUEST
 * A COPY OF THE ALTERNATE LICENSING TERMS OFFERED BY BEYONDTRUST, PLEASE CONTACT
 * BEYONDTRUST AT beyondtrust.com/contact
 */

#ifndef __LW_MAP_SECURITY_PLUGIN_H__
#define __LW_MAP_SECURITY_PLUGIN_H__

#include <lw/security-types.h>
#include <lw/ntstatus.h>
#include <lw/mapsecurity.h>
#include <lw/mapsecurity-types.h>

NTSTATUS
LwMapSecurityInitializeSidFromUnmappedId(
    IN ULONG SidSize,
    OUT PSID Sid,
    IN BOOLEAN IsUser,
    IN ULONG Id
    );

typedef struct _ACCESS_TOKEN_CREATE_INFORMATION {
    PTOKEN_USER User;
    PTOKEN_GROUPS Groups;
    PTOKEN_PRIVILEGES Privileges;
    PTOKEN_OWNER Owner;
    PTOKEN_PRIMARY_GROUP PrimaryGroup;
    PTOKEN_DEFAULT_DACL DefaultDacl;
    PTOKEN_UNIX Unix;
} ACCESS_TOKEN_CREATE_INFORMATION, *PACCESS_TOKEN_CREATE_INFORMATION;

typedef struct _LW_MAP_SECURITY_PLUGIN_CONTEXT *PLW_MAP_SECURITY_PLUGIN_CONTEXT;

// LWMSP = LW_MAP_SECURITY_PLUGIN

typedef
VOID
(*LWMSP_FREE_CONTEXT_CALLBACK)(
    IN OUT PLW_MAP_SECURITY_PLUGIN_CONTEXT* Context
    );

typedef
NTSTATUS
(*LWMSP_GET_ID_FROM_SID_CALLBACK)(
    IN PLW_MAP_SECURITY_PLUGIN_CONTEXT Context,
    OUT PBOOLEAN IsUser,
    OUT PULONG Id,
    IN PSID Sid
    );

typedef
NTSTATUS
(*LWMSP_GET_SID_FROM_ID_CALLBACK)(
    IN PLW_MAP_SECURITY_PLUGIN_CONTEXT Context,
    OUT PSID* Sid,
    IN BOOLEAN IsUser,
    IN ULONG Id
    );

typedef
NTSTATUS
(*LWMSP_GET_SID_FROM_NAME_CALLBACK)(
    IN PLW_MAP_SECURITY_PLUGIN_CONTEXT Context,
    OUT PSID* Sid,
    IN BOOLEAN IsUser,
    IN PCSTR Name
    );

typedef
NTSTATUS
(*LWMSP_GET_NAME_FROM_SID_CALLBACK)(
    IN PLW_MAP_SECURITY_PLUGIN_CONTEXT Context,
    OUT PSTR* Domain,
    OUT PSTR* Name,
    OUT PBOOLEAN IsUser,
    IN PSID Sid
    );

typedef
NTSTATUS
(*LWMSP_DUPLICATE_SID_CALLBACK)(
    IN PLW_MAP_SECURITY_PLUGIN_CONTEXT Context,
    IN OUT PSID* Sid,
    IN PSID OriginalSid
    );

typedef
VOID
(*LWMSP_FREE_SID_CALLBACK)(
    IN PLW_MAP_SECURITY_PLUGIN_CONTEXT Context,
    IN OUT PSID* Sid
    );

typedef
VOID
(*LWMSP_FREE_CSTRING_CALLBACK)(
    IN PLW_MAP_SECURITY_PLUGIN_CONTEXT Context,
    IN OUT PSTR* String
    );

typedef
NTSTATUS
(*LWMSP_GET_ACCESS_TOKEN_CREATE_INFORMATION_FROM_UID_CALLBACK)(
    IN PLW_MAP_SECURITY_PLUGIN_CONTEXT Context,
    OUT PACCESS_TOKEN_CREATE_INFORMATION* CreateInformation,
    IN ULONG Uid,
    IN OPTIONAL PULONG Gid
    );

typedef
NTSTATUS
(*LWMSP_GET_ACCESS_TOKEN_CREATE_INFORMATION_FROM_USERNAME_CALLBACK)(
    IN PLW_MAP_SECURITY_PLUGIN_CONTEXT Context,
    OUT PACCESS_TOKEN_CREATE_INFORMATION* CreateInformation,
    IN PUNICODE_STRING Username
    );

typedef
NTSTATUS
(*LWMSP_GET_ACCESS_TOKEN_CREATE_INFORMATION_FROM_GSS_CONTEXT_CALLBACK)(
    IN PLW_MAP_SECURITY_PLUGIN_CONTEXT Context,
    OUT PACCESS_TOKEN_CREATE_INFORMATION* CreateInformation,
    IN LW_MAP_SECURITY_GSS_CONTEXT GssContext
    );

typedef
VOID
(*LWMSP_FREE_ACCESS_TOKEN_CREATE_INFORMATION_CALLBACK)(
    IN PLW_MAP_SECURITY_PLUGIN_CONTEXT Context,
    IN OUT PACCESS_TOKEN_CREATE_INFORMATION* CreateInformation
    );

typedef
NTSTATUS
(*LWMSP_GET_ACCESS_TOKE_CREATE_INFORMATION_FROM_NTLM_LOGON_CALLBACK)(
    IN PLW_MAP_SECURITY_PLUGIN_CONTEXT Context,
    OUT PACCESS_TOKEN_CREATE_INFORMATION* CreateInformation,
    IN PLW_MAP_SECURITY_NTLM_LOGON_INFO pNtlmInfo,
    OUT PLW_MAP_SECURITY_NTLM_LOGON_RESULT* ppNtlmResult
    );

typedef
VOID
(*LWMSP_FREE_NTLM_LOGON_RESULT_CALLBACK)(
    IN PLW_MAP_SECURITY_PLUGIN_CONTEXT Context,
    IN OUT PLW_MAP_SECURITY_NTLM_LOGON_RESULT* ppNtlmResult
    );

typedef
NTSTATUS
(*LWMSP_GET_LOCAL_GUEST_ACCOUNT_SID_CALLBACK)(
    IN PLW_MAP_SECURITY_PLUGIN_CONTEXT pContext,
    OUT PSID* ppSid
    );

typedef struct _LW_MAP_SECURITY_PLUGIN_INTERFACE {
    LWMSP_FREE_CONTEXT_CALLBACK FreeContext;
    LWMSP_GET_ID_FROM_SID_CALLBACK GetIdFromSid;
    LWMSP_GET_SID_FROM_ID_CALLBACK GetSidFromId;
    LWMSP_GET_SID_FROM_NAME_CALLBACK GetSidFromName;
    LWMSP_GET_NAME_FROM_SID_CALLBACK GetNameFromSid;
    LWMSP_DUPLICATE_SID_CALLBACK DuplicateSid;
    LWMSP_FREE_SID_CALLBACK FreeSid;
    LWMSP_FREE_CSTRING_CALLBACK FreeCString;
    LWMSP_GET_ACCESS_TOKEN_CREATE_INFORMATION_FROM_UID_CALLBACK GetAccessTokenCreateInformationFromUid;
    LWMSP_GET_ACCESS_TOKEN_CREATE_INFORMATION_FROM_USERNAME_CALLBACK GetAccessTokenCreateInformationFromUsername;
    LWMSP_GET_ACCESS_TOKEN_CREATE_INFORMATION_FROM_GSS_CONTEXT_CALLBACK GetAccessTokenCreateInformationFromGssContext;
    LWMSP_FREE_ACCESS_TOKEN_CREATE_INFORMATION_CALLBACK FreeAccessTokenCreateInformation;
    LWMSP_GET_ACCESS_TOKE_CREATE_INFORMATION_FROM_NTLM_LOGON_CALLBACK GetAccessTokenCreateInformationFromNtlmLogon;
    LWMSP_FREE_NTLM_LOGON_RESULT_CALLBACK FreeNtlmLogonResult;
    LWMSP_GET_LOCAL_GUEST_ACCOUNT_SID_CALLBACK GetLocalGuestAccountSid;
} LW_MAP_SECURITY_PLUGIN_INTERFACE, *PLW_MAP_SECURITY_PLUGIN_INTERFACE;

#define LWMSP_CREATE_CONTEXT_FUNCTION_NAME \
    "MapSecurityPluginCreateContext"

typedef
NTSTATUS
(*LWMSP_CREATE_CONTEXT_CALLBACK)(
    OUT PLW_MAP_SECURITY_PLUGIN_CONTEXT* Context,
    OUT PLW_MAP_SECURITY_PLUGIN_INTERFACE* Interface
    );

#endif /* __LW_SECURITY_TOKEN_CREATE_INFO_H__ */
