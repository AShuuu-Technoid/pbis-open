/*
 * Copyright Â© BeyondTrust Software 2004 - 2019
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * BEYONDTRUST MAKES THIS SOFTWARE AVAILABLE UNDER OTHER LICENSING TERMS AS
 * WELL. IF YOU HAVE ENTERED INTO A SEPARATE LICENSE AGREEMENT WITH
 * BEYONDTRUST, THEN YOU MAY ELECT TO USE THE SOFTWARE UNDER THE TERMS OF THAT
 * SOFTWARE LICENSE AGREEMENT INSTEAD OF THE TERMS OF THE APACHE LICENSE,
 * NOTWITHSTANDING THE ABOVE NOTICE.  IF YOU HAVE QUESTIONS, OR WISH TO REQUEST
 * A COPY OF THE ALTERNATE LICENSING TERMS OFFERED BY BEYONDTRUST, PLEASE CONTACT
 * BEYONDTRUST AT beyondtrust.com/contact
 */

/*
 * Module Name:
 *
 *        main.doxy
 *
 * Abstract:
 *
 *        Main documentation page
 *
 * Authors: Brian Koropoff (bkoropoff@likewisesoftware.com)
 *
 */
/**
@mainpage Overview

The Likewise message library (<tt>LWMsg</tt>) is a data serialization
and transmission system designed for the following scenarios:

- Local interprocess communication using plain C data structures and
  procedure call semantics
- Serialization of data structures to disk for long-term storage

The library has been designed as a series of foundational layers:

- A type specification system for describing the layout of C data structures and binding sets of these structures into protocol descriptions
- A data model for converting data structures to and from a flat representation
- An association system which encapsulates the notion of stateful, full-duplex, message-oriented communication channels between peers
- A call discipline which supports synchronous and asynchronous procedure calls

On top of this foundation are concrete services for use by client applications:

- Associations that send and receive messages over UNIX domain sockets
- Generic, multi-threaded client and server implementations for remote procedure calls
- Archive files, a mechanism for persisting data structures to disk

**/
